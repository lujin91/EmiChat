<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 使得mapper.xml与接口绑定成为可能：namespace与接口所在类路径相同，則开发人员无需再编写接口实现类
（当然mapper中的sql语句的id需要与接口中的方法名相同，参数也应相符），这部分可由mybatis动态生成实现。 -->
<mapper namespace="com.emi.dao.RelationShipMapper">

	<!-- 添加cache标签就代表本mapper启用二级缓存。二级缓存是根据mapper的namespace划分的，相同的namespace的mapper查询数据放在同一个区域，
	如果使用mapper代理方法每个mapper的namespace都不同，此时可以理解为二级缓存区域是根据mapper划分，也就是根据命名空间划分的，如果两个
	mapper文件的命名空间一样，那么，它们就共享一个mapper缓存 -->
	<cache></cache>
	
	<resultMap id="BaseResultMap" type="com.emi.entity.RelationShip">
	    <!--
	      WARNING - @mbg.generated
	      This element is automatically generated by MyBatis Generator, do not modify.
	      This element was generated on Sat Mar 14 11:50:27 CST 2020.
	    -->
	    <id column="rid" jdbcType="CHAR" property="rid" />
	    <result column="remarkName" jdbcType="VARCHAR" property="remarkName" />
	    <result column="cid" jdbcType="CHAR" property="cid" />
	    <result column="uid" jdbcType="CHAR" property="uid" />
	    
	    <association property="contack" javaType="user" column="cid" 
	    	select="com.emi.dao.UserMapper.queryUserById">
	    </association>
	    
	    <association property="user" javaType="user" column="uid" 
	    	select="com.emi.dao.UserMapper.queryUserById">
	    </association>
	</resultMap>

	<insert id="saveRelationShip" parameterType="relationShip">
		insert into tb_relation(rid, remarkName, cid, uid) value(#{rid}, #{remarkName}, #{cid}, #{uid})
	</insert>
	
	<select id="queryRelationsByUid" parameterType="string" resultMap="BaseResultMap" useCache="false">
		select * from tb_relation where uid=#{uid}
	</select>
	
</mapper>
