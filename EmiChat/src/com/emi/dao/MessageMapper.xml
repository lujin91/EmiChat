<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 使得mapper.xml与接口绑定成为可能：namespace与接口所在类路径相同，則开发人员无需再编写接口实现类
（当然mapper中的sql语句的id需要与接口中的方法名相同，参数也应相符），这部分可由mybatis动态生成实现。 -->
<mapper namespace="com.emi.dao.MessageMapper">
	
	<!-- 添加cache标签就代表本mapper启用二级缓存。二级缓存是根据mapper的namespace划分的，相同的namespace的mapper查询数据放在同一个区域，
	如果使用mapper代理方法每个mapper的namespace都不同，此时可以理解为二级缓存区域是根据mapper划分，也就是根据命名空间划分的，如果两个
	mapper文件的命名空间一样，那么，它们就共享一个mapper缓存 -->
	
	<cache></cache>
	
	<!-- flushCache="true", 若当前statement是需要提交的（insert,update,delete），則flushCache默认是true,  
  	若当前statement是select，則flushCache默认是false
  	PS: flushCache(清空缓存)是当前namespace中所有的缓存都被清除。
  	-->
	
	<resultMap id="BaseResultMap" type="com.emi.entity.Message">
	    <id column="id" jdbcType="INTEGER" property="id" />
	    <result column="sendId" jdbcType="VARCHAR" property="sendId" />
	    <result column="recvId" jdbcType="VARCHAR" property="recvId" />
	    <result column="recvGrpId" jdbcType="VARCHAR" property="recvGrpId" />
	    <result column="sendTime" jdbcType="TIMESTAMP" property="sendTime" />
	    <result column="type" jdbcType="INTEGER" property="type" />
	    <result column="content" jdbcType="VARCHAR" property="content" />
	</resultMap>
  
	<insert id="saveMessage" parameterType="message">
		insert into tb_message(sendId, recvId, recvGrpId, type, sendTime, content) value(#{sendId}, #{recvId}, #{recvGrpId}, #{type}, #{sendTime}, #{content})
	</insert>
	
	<update id="changeTypeByUser" parameterType="map">
		update tb_message set type=#{newValue} where type=#{oldValue}
	    <choose>
	    	<when test="cid != null">
	    		and ((recvId=#{cid} and sendId=#{uid}) or (recvId=#{uid} and sendId=#{cid}))
	    	</when>
	    	<otherwise>
	    		and recvId=#{uid}
	    	</otherwise>
	    </choose>
		 
	</update>
	
	<update id="changeTypeById" parameterType="map">
		update tb_message set type=#{type} where id=#{id}
	</update>
	
	<select id="queryOfflineBeginId" parameterType="string" resultType="int">
		select coalesce(min(id),-1) from tb_message where type=#{type} and recvId=#{uid}
	</select>
	
	<select id="queryChatMessagesByBeginId" parameterType="string" resultType="com.emi.entity.Message">
		select * from tb_message where id &gt;= #{beginId} and type in (0, 1) and ((recvId=#{uid1} and sendId=#{uid2}) or (recvId=#{uid2} and sendId=#{uid1})) order by id desc
	</select>
	
	<select id="queryChatMessages" parameterType="string" resultType="com.emi.entity.Message">
		select * from tb_message where type=#{type} and ((recvId=#{uid1} and sendId=#{uid2}) or (recvId=#{uid2} and sendId=#{uid1})) order by id asc
	</select>
	
	<select id="queryGrpMessages" parameterType="string" resultMap="BaseResultMap">
		select * from tb_message where type in (0, 1) and recvGrpId=#{gid}
		<if test="lastId != -1">
	       and id &lt; #{lastId} 
	    </if>
	    order by id desc limit 0, #{size}
	</select>
	
	<select id="queryChatMessagesByLastId" parameterType="string" resultType="com.emi.entity.Message">
		select * from tb_message where type in (0, 1) and ((recvId=#{uid1} and sendId=#{uid2}) or (recvId=#{uid2} and sendId=#{uid1})) 
		<if test="lastId != -1">
	       and id &lt; #{lastId} 
	    </if>
	    order by id desc limit 0, #{size}
	</select>
	
	<select id="queryAdviceMessages" parameterType="string" resultType="com.emi.entity.Message">
		select * from tb_message where type=#{type} and recvId=#{uid} order by id desc
	</select>
	
	<select id="queryAdviceMessagesByLastId" parameterType="string" resultType="com.emi.entity.Message">
		select * from tb_message where type in (3, 4) and recvId=#{uid}
		<if test="lastId != -1">
	       and id &lt; #{lastId} 
	    </if>
	    order by id desc limit 0, #{size}
	</select>
	
	<select id="querySendIdsByParams" parameterType="string" resultType="string">
		select distinct(sendId) from tb_message where type=#{type} and recvId=#{uid}
	</select>
	
	<!-- (@Param(value = "sendId") String sendId, @Param(value = "recvGrpId") String recvGrpId, @Param(value = "recvId") String recvId); -->
	<select id="queryApplyCountByParams" parameterType="string" resultType="int" useCache="false">
		select count(*) from tb_message where sendId=#{sendId}
		<if test="recvId != null">
	       and recvId=#{recvId}
	    </if>
	    <if test="recvGrpId != null">
	       and recvGrpId=#{recvGrpId}
	    </if>
		and type in (2,3,4) and sendTime >= current_timestamp - interval 30 minute;
	</select>
	
	<!-- <select id="queryMessagesByLastId" parameterType="string" resultType="com.emi.entity.Message">
		select * from tb_message where type=#{type} and (recvId=#{recvId}
		<if test="sendId != null">
	       or sendId=#{sendId}
	    </if>
		) 
		<if test="lastId != -1">
	       and id &lt; #{lastId} 
	    </if>
	    order by id asc limit 0, #{size}
	</select> -->
	
	<select id="queryMaxIdGroupBySendId" parameterType="string" resultType="string">
		select CONCAT(CONCAT(sendId,'#'),max(id)) from tb_message where recvId=#{uid} group by sendId
	</select>
</mapper>
